# Put Indexes Operation
 ---

{NOTE: }

* There are a few ways to create and deploy indexes in a database.  

* This page describes deploying a **static-index** using the `PutIndexesOperation` Operation.  
  For a general description of Operations see [what are operations](../../../../client-api/operations/what-are-operations).  

* In this page:
    * [Ways to deploy indexes - short summary](../../../../client-api/operations/maintenance/indexes/put-indexes#ways-to-deploy-indexes---short-summary)
    * [Put indexes operation with IndexDefinition](../../../../client-api/operations/maintenance/indexes/put-indexes#put-indexes-operation-with-indexdefinition)
    * [Put indexes operation with IndexDefinitionBuilder](../../../../client-api/operations/maintenance/indexes/put-indexes#put-indexes-operation-with-indexdefinitionbuilder)
    * [Syntax](../../../../client-api/operations/maintenance/indexes/put-indexes#syntax)

{NOTE/}

---

{PANEL: Ways to deploy indexes - short summary }

{NOTE: }

##### Static-indexes:

There are a few ways to deploy a static-index from the Client API:  

* The following methods are explained in section [Deploy a static-index](../../../../indexes/creating-and-deploying#deploy-a-static-index):
  * Call `Execute()` on a specific index instance.
  * Call `ExecuteIndex` or `ExecuteIndexes` on your _DocumentStore_ object.
  * Call `IndexCreation.CreateIndexes()`.

* Alternatively, you can execute the `PutIndexesOperation` maintenance operation on the _DocumentStore_, **as explained below**.

{NOTE/}
{NOTE: }

##### Auto-indexes:

  * An auto-index is created by the server when making a filtering query that doesn't specify which index to use.
    Learn more in [Creating auto indexes](../../../../indexes/creating-and-deploying#auto-indexes).

{NOTE/}
{PANEL/}

{PANEL: Put indexes operation with IndexDefinition }

Using `PutIndexesOperation` with **IndexDefinition** allows you to:

  * Choose any name for the index.  
    This string-based name is specified when querying the index.
  * Set low-level properties available in _IndexDefinition_.

{CODE-TABS}
{CODE-TAB:csharp:LINQ-index-Sync put_1@ClientApi\Operations\Maintenance\Indexes\Put.cs /}
{CODE-TAB:csharp:LINQ-index-Async put_1_async@ClientApi\Operations\Maintenance\Indexes\Put.cs /}
{CODE-TAB:csharp:JavaScript-index put_1_JS@ClientApi\Operations\Maintenance\Indexes\Put.cs /}
{CODE-TABS/}

{PANEL/}

{PANEL: Put indexes operation with IndexDefinitionBuilder }

Using `PutIndexesOperation` with an IndexDefinition created from an **IndexDefinitionBuilder** allows:  

  * Creating an index definition using a strongly typed LINQ syntax.  
  * Setting low-level properties available in _IndexDefinitionBuilder_.
  * Note:  
    Only map or map-reduce indexes can be generated by the _IndexDefinitionBuilder_.  
    To generate multi-map indexes use the above _IndexDefinition_ option. 

{CODE-TABS}
{CODE-TAB:csharp:Sync put_2@ClientApi\Operations\Maintenance\Indexes\Put.cs /}
{CODE-TAB:csharp:Async put_2_async@ClientApi\Operations\Maintenance\Indexes\Put.cs /}
{CODE-TABS/}

{PANEL/}

{PANEL: Syntax }

{CODE syntax@ClientApi\Operations\Maintenance\Indexes\Put.cs /}

| Parameters | Type | Description |
| - |- | - |
| **indexesToAdd** | `params IndexDefinition[]` | Definitions of indexes to deploy |

<a id="indexDefinition" />

| `IndexDefinition` parameter | Type | Description |
| - | - | - |
| Name | `string` | Name of the index, a unique identifier |
| Maps | `HashSet<string>` | All the map functions for the index |
| Reduce | `string` | The index reduce function |
| DeploymentMode | `IndexDeploymentMode?` | Deployment mode<br>(Parallel, Rolling) |
| State | `IndexState?` | State of index<br>(Normal, Disabled, Idle, Error) |
| Priority | `IndexPriority?` | Priority of index<br>(Low, Normal, High) |
| LockMode | `IndexLockMode?` | Lock mode of index<br>(Unlock, LockedIgnore, LockedError) |
| Fields | `Dictionary<string, IndexFieldOptions>` | _IndexFieldOptions_ per index field |
| AdditionalSources | `Dictionary<string, string>` | Additional code files to be compiled with this index |
| AdditionalAssemblies | `HashSet<AdditionalAssembly>` | Additional assemblies that are referenced |
| Configuration | `IndexConfiguration` | Can override [indexing configuration](../../../../server/configuration/indexing-configuration) by setting this dictionary |
| OutputReduceToCollection | `string` | A collection name for saving the reduce results as documents |
| ReduceOutputIndex | `long?` | This number will be part of the reduce results documents IDs |
| PatternForOutputReduceToCollectionReferences | `string` | Pattern for documents IDs which reference IDs of reduce results documents |
| PatternReferencesCollectionName | `string` | A collection name for the reference documents created based on provided pattern |

| `store.Maintenance.Send(putIndexesOp)` return value | Description |
| - | - |
| `PutIndexResult[]` | List of _PutIndexResult_ per index |

| `PutIndexResult` parameter | Type | Description |
| - | - | - |
| Index | `string` | Name of the index that was added |
| RaftCommandIndex | `long` | Index of raft command that was executed |

{PANEL/}

## Related Articles

### Indexes

- [What are Indexes](../../../../indexes/what-are-indexes)
- [Creating and Deploying Indexes](../../../../indexes/creating-and-deploying)
- [Index Administration](../../../../indexes/index-administration)

### Operations

- [What are operations](../../../../client-api/operations/what-are-operations)
- [How to Get Indexes](../../../../client-api/operations/maintenance/indexes/get-indexes)
- [How to Delete Index](../../../../client-api/operations/maintenance/indexes/delete-index)
- [How to Reset Index](../../../../client-api/operations/maintenance/indexes/reset-index)
